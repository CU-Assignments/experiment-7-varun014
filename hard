package model;

public class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    // Getters and Setters
    public int getStudentID() { return studentID; }
    public void setStudentID(int studentID) { this.studentID = studentID; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getDepartment() { return department; }
    public void setDepartment(String department) { this.department = department; }
    
    public double getMarks() { return marks; }
    public void setMarks(double marks) { this.marks = marks; }
}
Model Layer 
package util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBUtil {
    private static final String URL = "jdbc:mysql://localhost:3306/student_db";
    private static final String USER = "root";
    private static final String PASSWORD = "password";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }
}
3.package controller;

import model.Student;
import util.DBUtil;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentController {
    
    public void createStudent(Student student) throws SQLException {
        String sql = "INSERT INTO Student (Name, Department, Marks) VALUES (?, ?, ?)";
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            
            pstmt.setString(1, student.getName());
            pstmt.setString(2, student.getDepartment());
            pstmt.setDouble(3, student.getMarks());
            pstmt.executeUpdate();
        }
    }

    public List<Student> getAllStudents() throws SQLException {
        List<Student> students = new ArrayList<>();
        String sql = "SELECT * FROM Student";
        
        try (Connection conn = DBUtil.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            
            while (rs.next()) {
                Student student = new Student();
                student.setStudentID(rs.getInt("StudentID"));
                student.setName(rs.getString("Name"));
                student.setDepartment(rs.getString("Department"));
                student.setMarks(rs.getDouble("Marks"));
                students.add(student);
            }
        }
        return students;
    }

    public void updateStudent(Student student) throws SQLException {
        String sql = "UPDATE Student SET Name=?, Department=?, Marks=? WHERE StudentID=?";
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            
            pstmt.setString(1, student.getName());
            pstmt.setString(2, student.getDepartment());
            pstmt.setDouble(3, student.getMarks());
            pstmt.setInt(4, student.getStudentID());
            pstmt.executeUpdate();
        }
    }

    public void deleteStudent(int studentID) throws SQLException {
        String sql = "DELETE FROM Student WHERE StudentID=?";
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            
            pstmt.setInt(1, studentID);
            pstmt.executeUpdate();
        }
    }
}
4.package view;

import model.Student;
import controller.StudentController;
import java.util.List;
import java.util.Scanner;

public class StudentView {
    private Scanner scanner = new Scanner(System.in);
    private StudentController controller = new StudentController();

    public void showMenu() {
        while (true) {
            System.out.println("\nStudent Management System");
            System.out.println("1. Add Student");
            System.out.println("2. View All Students");
            System.out.println("3. Update Student");
            System.out.println("4. Delete Student");
            System.out.println("5. Exit");
            System.out.print("Enter choice: ");
            
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            
            switch (choice) {
                case 1: addStudent(); break;
                case 2: displayStudents(); break;
                case 3: updateStudent(); break;
                case 4: deleteStudent(); break;
                case 5: System.exit(0);
                default: System.out.println("Invalid choice!");
            }
        }
    }

    private void addStudent() {
        Student student = new Student();
        System.out.print("Enter student name: ");
        student.setName(scanner.nextLine());
        System.out.print("Enter department: ");
        student.setDepartment(scanner.nextLine());
        System.out.print("Enter marks: ");
        student.setMarks(scanner.nextDouble());
        
        try {
            controller.createStudent(student);
            System.out.println("Student added successfully!");
        } catch (Exception e) {
            System.out.println("Error adding student: " + e.getMessage());
        }
    }

    private void displayStudents() {
        try {
            List<Student> students = controller.getAllStudents();
            System.out.println("\nStudent List:");
            System.out.println("ID\tName\t\tDepartment\tMarks");
            for (Student s : students) {
                System.out.printf("%d\t%s\t%s\t%.2f\n",
                    s.getStudentID(), s.getName(), s.getDepartment(), s.getMarks());
            }
        } catch (Exception e) {
            System.out.println("Error retrieving students: " + e.getMessage());
        }
    }

    private void updateStudent() {
        System.out.print("Enter student ID to update: ");
        int id = scanner.nextInt();
        scanner.nextLine();
        
        try {
            Student student = new Student();
            student.setStudentID(id);
            
            System.out.print("New name (leave blank to keep): ");
            String name = scanner.nextLine();
            if (!name.isEmpty()) student.setName(name);
            
            System.out.print("New department (leave blank to keep): ");
            String dept = scanner.nextLine();
            if (!dept.isEmpty()) student.setDepartment(dept);
            
            System.out.print("New marks (0 to keep): ");
            double marks = scanner.nextDouble();
            if (marks != 0) student.setMarks(marks);
            
            controller.updateStudent(student);
            System.out.println("Student updated successfully!");
        } catch (Exception e) {
            System.out.println("Error updating student: " + e.getMessage());
        }
    }

    private void deleteStudent() {
        System.out.print("Enter student ID to delete: ");
        int id = scanner.nextInt();
        
        try {
            controller.deleteStudent(id);
            System.out.println("Student deleted successfully!");
        } catch (Exception e) {
            System.out.println("Error deleting student: " + e.getMessage());
        }
    }
}
5.public class MainApp {
    public static void main(String[] args) {
        new view.StudentView().showMenu();
    }
}
6.CREATE DATABASE IF NOT EXISTS student_db;
USE student_db;

CREATE TABLE Student (
    StudentID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255) NOT NULL,
    Department VARCHAR(255) NOT NULL,
    Marks DECIMAL(5,2) NOT NULL
);
